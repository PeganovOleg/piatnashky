#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–≥—Ä–∞ –ü—è—Ç–Ω–∞—à–∫–∏ —Å –°–µ—Ä–¥–µ—á–∫–∞–º–∏
–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ –ø—è—Ç–Ω–∞—à–∫–∏, –Ω–æ –≤–º–µ—Å—Ç–æ —Ü–∏—Ñ—Ä –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–µ—Ä–¥–µ—á–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
"""

import tkinter as tk
from tkinter import messagebox
import random

class HeartsPuzzleGame:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("–ü—è—Ç–Ω–∞—à–∫–∏ —Å –°–µ—Ä–¥–µ—á–∫–∞–º–∏ üíñ")
        self.root.geometry("500x600")
        self.root.configure(bg='#FFE4E1')
        self.root.resizable(False, False)
        
        # –†–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è 4x4
        self.size = 4
        self.tile_size = 100
        
        # –¶–≤–µ—Ç–∞ —Å–µ—Ä–¥–µ—á–µ–∫ (15 —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ + –ø—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞)
        self.heart_colors = [
            '#FF1493',  # –†–æ–∑–æ–≤—ã–π
            '#FF69B4',  # –ì–æ—Ä—è—á–∏–π —Ä–æ–∑–æ–≤—ã–π
            '#FFB6C1',  # –°–≤–µ—Ç–ª–æ-—Ä–æ–∑–æ–≤—ã–π
            '#FFC0CB',  # –†–æ–∑–æ–≤—ã–π
            '#DC143C',  # –ú–∞–ª–∏–Ω–æ–≤—ã–π
            '#B22222',  # –û–≥–Ω–µ–Ω–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
            '#CD5C5C',  # –ò–Ω–¥–∏–π—Å–∫–∏–π –∫—Ä–∞—Å–Ω—ã–π
            '#F08080',  # –°–≤–µ—Ç–ª–æ-–∫–æ—Ä–∞–ª–ª–æ–≤—ã–π
            '#FA8072',  # –õ–æ—Å–æ—Å–µ–≤—ã–π
            '#E9967A',  # –¢–µ–º–Ω–æ-–ª–æ—Å–æ—Å–µ–≤—ã–π
            '#FFA07A',  # –°–≤–µ—Ç–ª–æ-–ª–æ—Å–æ—Å–µ–≤—ã–π
            '#FF7F50',  # –ö–æ—Ä–∞–ª–ª–æ–≤—ã–π
            '#FF6347',  # –¢–æ–º–∞—Ç–Ω—ã–π
            '#FF4500',  # –û—Ä–∞–Ω–∂–µ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π
            '#FF8C00',  # –¢–µ–º–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
        ]
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
        self.board = list(range(1, 16)) + [0]  # 1-15 –∏ –ø—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞ (0)
        self.solution = self.board.copy()
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ–ª–µ
        self.shuffle_board()
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_widgets()
        
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–≥—Ä—ã"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(
            self.root, 
            text="üíù –ü—è—Ç–Ω–∞—à–∫–∏ —Å –°–µ—Ä–¥–µ—á–∫–∞–º–∏ üíù", 
            font=("Arial", 18, "bold"),
            bg='#FFE4E1',
            fg='#8B0000'
        )
        title_label.pack(pady=10)
        
        # –°—á–µ—Ç—á–∏–∫ —Ö–æ–¥–æ–≤
        self.moves_label = tk.Label(
            self.root,
            text="–•–æ–¥–æ–≤: 0",
            font=("Arial", 14),
            bg='#FFE4E1',
            fg='#8B0000'
        )
        self.moves_label.pack(pady=5)
        self.moves_count = 0
        
        # –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        self.game_frame = tk.Frame(self.root, bg='#FFE4E1')
        self.game_frame.pack(pady=20)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–∏
        self.buttons = []
        for i in range(self.size):
            row = []
            for j in range(self.size):
                btn = tk.Button(
                    self.game_frame,
                    width=6,
                    height=3,
                    font=("Arial", 20, "bold"),
                    command=lambda r=i, c=j: self.move_tile(r, c),
                    relief="raised",
                    bd=3
                )
                btn.grid(row=i, column=j, padx=2, pady=2)
                row.append(btn)
            self.buttons.append(row)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = tk.Frame(self.root, bg='#FFE4E1')
        control_frame.pack(pady=20)
        
        new_game_btn = tk.Button(
            control_frame,
            text="üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞",
            font=("Arial", 12, "bold"),
            command=self.new_game,
            bg='#FF69B4',
            fg='white',
            relief="raised",
            bd=3,
            padx=20
        )
        new_game_btn.pack(side=tk.LEFT, padx=10)
        
        solve_btn = tk.Button(
            control_frame,
            text="üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞",
            font=("Arial", 12, "bold"),
            command=self.show_hint,
            bg='#FFA07A',
            fg='white',
            relief="raised",
            bd=3,
            padx=20
        )
        solve_btn.pack(side=tk.LEFT, padx=10)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.update_display()
        
    def shuffle_board(self):
        """–ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è"""
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –µ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–µ
        while True:
            random.shuffle(self.board)
            if self.is_solvable():
                break
                
    def is_solvable(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ —Ä–µ—à–∏—Ç—å –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É"""
        inversions = 0
        flat_board = [x for x in self.board if x != 0]
        
        for i in range(len(flat_board)):
            for j in range(i + 1, len(flat_board)):
                if flat_board[i] > flat_board[j]:
                    inversions += 1
        
        # –î–ª—è 4x4 –ø–æ–ª—è: –µ—Å–ª–∏ –ø—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞ –Ω–∞ —á–µ—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —Å–Ω–∏–∑—É,
        # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≤–µ—Ä—Å–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ—á–µ—Ç–Ω—ã–º
        empty_row = self.board.index(0) // self.size
        if (self.size - empty_row) % 2 == 0:
            return inversions % 2 == 1
        else:
            return inversions % 2 == 0
            
    def update_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è"""
        for i in range(self.size):
            for j in range(self.size):
                index = i * self.size + j
                value = self.board[index]
                
                if value == 0:
                    # –ü—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞
                    self.buttons[i][j].config(
                        text="",
                        bg='#F0F0F0',
                        state='disabled',
                        relief="sunken"
                    )
                else:
                    # –ö–ª–µ—Ç–∫–∞ —Å —Å–µ—Ä–¥–µ—á–∫–æ–º
                    color = self.heart_colors[value - 1]
                    self.buttons[i][j].config(
                        text="üíñ",
                        bg=color,
                        fg='white',
                        state='normal',
                        relief="raised",
                        activebackground=color,
                        disabledforeground='white'
                    )
                    
    def move_tile(self, row, col):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–ª–∏—Ç–∫–∏"""
        index = row * self.size + col
        value = self.board[index]
        
        if value == 0:  # –ù–µ–ª—å–∑—è –¥–≤–∏–≥–∞—Ç—å –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É
            return
            
        # –ò—â–µ–º –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É
        empty_index = self.board.index(0)
        empty_row = empty_index // self.size
        empty_col = empty_index % self.size
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
        if (abs(row - empty_row) == 1 and col == empty_col) or \
           (abs(col - empty_col) == 1 and row == empty_row):
            # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏
            self.board[index], self.board[empty_index] = self.board[empty_index], self.board[index]
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ö–æ–¥–æ–≤
            self.moves_count += 1
            self.moves_label.config(text=f"–•–æ–¥–æ–≤: {self.moves_count}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.update_display()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
            if self.check_win():
                self.show_win_message()
                
    def check_win(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã"""
        return self.board == self.solution
        
    def show_win_message(self):
        """–ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–±–µ–¥–µ"""
        messagebox.showinfo(
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ",
            f"–í—ã —Ä–µ—à–∏–ª–∏ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É –∑–∞ {self.moves_count} —Ö–æ–¥–æ–≤!\n\n"
            "–í—Å–µ —Å–µ—Ä–¥–µ—á–∫–∏ –Ω–∞ —Å–≤–æ–∏—Ö –º–µ—Å—Ç–∞—Ö! üíñüíñüíñ"
        )
        
    def new_game(self):
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É"""
        self.board = list(range(1, 16)) + [0]
        self.shuffle_board()
        self.moves_count = 0
        self.moves_label.config(text="–•–æ–¥–æ–≤: 0")
        self.update_display()
        
    def show_hint(self):
        """–ü–æ–∫–∞–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏"""
        # –ò—â–µ–º –ø–µ—Ä–≤—É—é –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—É—é –ø–ª–∏—Ç–∫—É
        for i, value in enumerate(self.board):
            if value != 0 and value != self.solution[i]:
                correct_pos = value - 1
                correct_row = correct_pos // self.size
                correct_col = correct_pos % self.size
                current_row = i // self.size
                current_col = i % self.size
                
                messagebox.showinfo(
                    "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞",
                    f"–°–µ—Ä–¥–µ—á–∫–æ {value} (üíñ) —Å–µ–π—á–∞—Å –≤ –ø–æ–∑–∏—Ü–∏–∏ ({current_row + 1}, {current_col + 1}),\n"
                    f"–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ø–æ–∑–∏—Ü–∏–∏ ({correct_row + 1}, {correct_col + 1})"
                )
                return
                
        messagebox.showinfo("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞", "–í—Å–µ —Å–µ—Ä–¥–µ—á–∫–∏ —É–∂–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö! üéâ")
        
    def run(self):
        """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã"""
        self.root.mainloop()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéÆ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã '–ü—è—Ç–Ω–∞—à–∫–∏ —Å –°–µ—Ä–¥–µ—á–∫–∞–º–∏'...")
    print("üìù –ü—Ä–∞–≤–∏–ª–∞:")
    print("   - –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ —Å–µ—Ä–¥–µ—á–∫–∏ —Ä—è–¥–æ–º —Å –ø—É—Å—Ç–æ–π –∫–ª–µ—Ç–∫–æ–π")
    print("   - –¶–µ–ª—å: —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–¥–µ—á–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É")
    print("   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã –∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫")
    print("üíñ –£–¥–∞—á–∏!\n")
    
    game = HeartsPuzzleGame()
    game.run()

if __name__ == "__main__":
    main()